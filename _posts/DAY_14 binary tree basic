一、常考的几类二叉树

1. 满二叉树：所有点都是满的 
        A
       / \
      B   C
     / \ / \
    D  E F  G

节点数量：2^k-1 =（k是深度）


2. 完全二叉树：除了底层，其它层都是满的 + 底层从左到右是连续的

        A
       / \
      B   C
     / \ 
    D   E

堆就是一个完全二叉树。


3. 二叉搜索树（节点便于搜索，搜索的时间复杂度LogN）：

左边的所有节点值 < 中间 < 右边 （子树也满足规律）。


4. 平衡二叉搜索树：

左右子树高度相差不能超过1。（子树也满足规律）

C++的map set nultimap multiset的底层实现都是平衡二叉树，所以用这些结构去插入或查询某个元素，是logN级别的。
- map和set里面的元素是有序的。


二、二叉树的存储方式

1. 链式存储：左指针连接左孩子，右指针连接右孩子，常见。
面试可能要自己写constructor，构造二叉树 - 理解它是一个链表，只是有2个指针。用指针连起来之后，把头结点传入功能函数就可以了。

2. 线式存储：用数组保存二叉树：给节点标注下标。
 比如，下标i的左孩子是：2*i+1 右孩子2*i+2。


三、二叉树的遍历（要非常熟练）

1. DFS：一般用递归实现，分前中后序。（也可以用iterate，但考得比较简单）
一条路跑到黑，再回退一点换个方向，再一条路跑到黑。
前中后序：中部节点的位置。（如，前序：中部节点-左子树-右子树）

2. BFS：一层一层（一圈一圈），一般是层序遍历。


四、二叉树的定义

一定要自己熟练写出来！！！






